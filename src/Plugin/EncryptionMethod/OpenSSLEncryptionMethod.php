<?php

namespace Drupal\encrypt_openssl\Plugin\EncryptionMethod;

use Drupal\encrypt\EncryptionMethodInterface;
use Drupal\encrypt\Plugin\EncryptionMethod\EncryptionMethodBase;
use Drupal\Component\Utility\Crypt;

/**
 * PHPSecLibEncryption class.
 *
 * @EncryptionMethod(
 *   id = "openssl",
 *   title = @Translation("AES (OpenSSL) + HMAC-SHA256"),
 *   description = "Uses AES-256-CBC via OpenSSL along with HMAC-SHA256.",
 *   key_type = {"encryption"}
 * )
 */
class OpenSSLEncryptionMethod extends EncryptionMethodBase implements EncryptionMethodInterface {

  /**
   * {@inheritdoc}
   */
  public function encrypt($text, $key) {
    $iv_size = openssl_cipher_iv_length('aes-256-cbc');
    $iv     = Crypt::randomBytes($iv_size);
    // Encryption key generated by PBKDF2.
    $keys    = hash_pbkdf2('sha256', $key, $iv, 10000, 64, TRUE);
    // 256 bit encryption key.
    $enc_key  = substr($keys, 0, 32);
    // 256 bit hmac key.
    $hmac_key = substr($keys, 32);

    $ciphertext = openssl_encrypt(
      $text,
      'aes-256-cbc',
      $enc_key,
      OPENSSL_RAW_DATA,
      $iv
    );
    $hmac = hash_hmac('sha256', $iv . $ciphertext, $hmac_key);

    return $hmac . $iv . $ciphertext;
  }

  /**
   * {@inheritdoc}
   */
  public function decrypt($text, $key) {
    $hmac       = substr($text, 0, 64);
    $iv_size     = openssl_cipher_iv_length('aes-256-cbc');
    $iv         = substr($text, 64, $iv_size);
    $ciphertext = substr($text, $iv_size + 64);

    // Generate the encryption and hmac keys.
    $keys    = hash_pbkdf2('sha256', $key, $iv, 10000, 64, TRUE);
    // 256 bit encryption key.
    $enc_key  = substr($keys, 0, 32);
    $hmac_new = hash_hmac('sha256', $iv . $ciphertext, substr($keys, 32));

    // To prevent timing attacks.
    if (!$this->compareStrings($hmac, $hmac_new)) {
      return FALSE;
    }

    return openssl_decrypt(
      $ciphertext,
      'aes-256-cbc',
      $enc_key,
      OPENSSL_RAW_DATA,
      $iv
    );
  }

  /**
   * {@inheritdoc}
   */
  public function checkDependencies($text = NULL, $key = NULL) {
    $errors = [];
    // Check for OpenSSL extension.
    if (!extension_loaded('openssl')) {
      $errors[] = 'OpenSSL PHP extension is missing.';
    }

    // Check if we have a 256 bit key as required by the AES-256-CBC cipher.
    if (strlen($key) != 32) {
      $errors[] = t('This encryption method requires a 256 bit key.');
    }

    return $errors;
  }

  /**
   * Compare strings in such a way so to prevent timing attacks.
   */
  protected function compareStrings($expected, $actual) {
    $expected    = (string) $expected;
    $actual      = (string) $actual;
    $len_expected = strlen($expected);
    $len_actual   = strlen($actual);
    $len         = min($len_expected, $len_actual);

    $result = 0;
    for ($i = 0; $i < $len; $i++) {
      $result |= ord($expected[$i]) ^ ord($actual[$i]);
    }
    $result |= $len_expected ^ $len_actual;

    return ($result === 0);
  }

}
